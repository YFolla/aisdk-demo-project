/**
 * @fileoverview Replicate Stable Diffusion integration
 * @description Handles image generation using Replicate's Stable Diffusion models
 */

import Replicate from 'replicate'
import { ImageGenerationRequest, ImageGenerationResult, ImageMetadata } from '@/types/images'

export interface ReplicateImageConfig {
  apiToken: string
  model: string
  version?: string
}

export const REPLICATE_CONFIG: ReplicateImageConfig = {
  apiToken: process.env.REPLICATE_API_TOKEN || '',
  model: process.env.STABLE_DIFFUSION_MODEL || 'stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b',
  version: undefined // Use latest version
}

let replicateClient: Replicate | null = null

function getReplicateClient(): Replicate {
  if (!replicateClient) {
    if (!REPLICATE_CONFIG.apiToken) {
      throw new Error('Replicate API token is required')
    }
    
    replicateClient = new Replicate({
      auth: REPLICATE_CONFIG.apiToken
    })
  }
  
  return replicateClient
}

/**
 * Generate image using Replicate Stable Diffusion
 */
export async function generateImageWithReplicate(
  request: ImageGenerationRequest
): Promise<ImageGenerationResult> {
  try {
    console.log('Generating image with Replicate:', {
      prompt: request.prompt.substring(0, 100) + '...',
      size: request.size,
      model: REPLICATE_CONFIG.model
    })

    const client = getReplicateClient()
    
    // Convert size to width/height
    const [width, height] = (request.size || '1024x1024').split('x').map(Number)
    
    const input = {
      prompt: request.prompt,
      width,
      height,
      num_outputs: 1,
      scheduler: 'K_EULER',
      num_inference_steps: 50,
      guidance_scale: 7.5,
      seed: Math.floor(Math.random() * 1000000)
    }

    const output = await client.run(REPLICATE_CONFIG.model, { input }) as string[]
    
    if (!output || output.length === 0) {
      throw new Error('No image generated by Replicate')
    }

    const imageUrl = output[0]
    const imageId = `replicate-${Date.now()}`
    
    const metadata: ImageMetadata = {
      id: imageId,
      url: imageUrl,
      prompt: request.prompt,
      provider: 'replicate',
      size: request.size || '1024x1024',
      generatedAt: new Date(),
      model: REPLICATE_CONFIG.model,
      cost: calculateReplicateCost(width, height)
    }

    console.log('Replicate image generated successfully:', {
      imageId,
      url: imageUrl
    })

    return {
      success: true,
      imageUrl,
      imageId,
      metadata
    }

  } catch (error) {
    console.error('Replicate image generation error:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Image generation failed'
    }
  }
}

/**
 * Calculate cost for Replicate image generation
 */
function calculateReplicateCost(width: number, height: number): number {
  // Replicate pricing is typically based on compute time
  // SDXL costs approximately $0.00025 per second
  // Estimate 10-20 seconds for generation
  const basePixels = 1024 * 1024
  const actualPixels = width * height
  const pixelMultiplier = actualPixels / basePixels
  
  return 0.003 * pixelMultiplier // Rough estimate
}

/**
 * Get Replicate provider capabilities
 */
export function getReplicateCapabilities() {
  return {
    imageGeneration: true,
    imageAnalysis: false,
    supportedSizes: ['512x512', '768x768', '1024x1024', '1152x896', '1216x832', '1344x768', '1536x640'],
    supportedStyles: ['photographic', 'digital-art', 'comic-book', 'fantasy-art', 'line-art', 'neon-punk'],
    supportedQualities: ['standard'],
    maxPromptLength: 2000,
    batchProcessing: false
  }
}

/**
 * Get Replicate provider limits
 */
export function getReplicateLimits() {
  return {
    requestsPerMinute: 10,
    requestsPerHour: 100,
    requestsPerDay: 500,
    maxImageSize: 2048 * 2048,
    maxBatchSize: 1
  }
}
